---

#### CHECK/DEFINE WHAT COMPONENTS ARE INSTALLED
  - name: check for file existence
    stat: 
      path: "{{ item.path }}"
    register: files
    with_items:
    - {path: "/etc/bind/zones/bind_db"}
    - {path: "/usr/local/etc/oai/mme.conf"}
    - {path: "/etc/nginx/sites-available/webgui.conf"}
    - {path: "/etc/nginx/sites-available/rocketchat.conf"}
    - {path: "/etc/nginx/sites-available/osm.conf"}  
    - {path: "/etc/nginx/sites-available/ums.conf"}
    - {path: "/etc/nginx/sites-available/xowa.conf"}

  - name: export bind variable
    set_fact:
      bind_installed: "1"
    when: files.results[0].stat.exists

  - name: export epc variable
    set_fact:
      epc_installed: "1"
    when: files.results[1].stat.exists

  - name: export webgui variable
    set_fact:
      webgui_installed: "1"
    when: files.results[2].stat.exists

  - name: export chat variable
    set_fact:
      chat_installed: "1"
    when: files.results[3].stat.exists

  - name: export osm variable
    set_fact:
      osm_installed: "1"
    when: files.results[4].stat.exists

  - name: export media variable
    set_fact:
      media_installed: "1"
    when: files.results[5].stat.exists

  - name: export xowa variable
    set_fact:
      wiki_installed: "1"
    when: files.results[6].stat.exists




######################################
############# BIND CONF ##############
######################################

  - name: write information to named.conf.options
    lineinfile:
      dest: "/etc/bind/named.conf.options"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: bind_installed is defined
    with_items:
    - {field: "#SUBNET", line: "  {{ lte_subnet }}; #SUBNET"}

  - name: write network name to named.conf.local
    lineinfile:
      dest: "/etc/bind/named.conf.local"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: bind_installed is defined
    with_items:
    - {field: "zone ", line: "zone \"{{ network_name }}\" {"}

  - name: write network name to zonefile
    lineinfile:
      dest: "/etc/bind/zones/bind_db"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: bind_installed is defined
    with_items:
    - {field: "admin", line: "@ IN  SOA colte.{{ network_name }}. admin.{{ network_name }}. ("}
    - {field: "N1", line: " IN  NS  colte.{{ network_name }}. ;N1"}
# SMS TODO: DYNAMICALLY WRITE/REPLACE 192.168.151.1?!?
    - {field: "A1", line: "colte.{{ network_name }}.  IN  A 192.168.151.1 ;A1"}
    - {field: "A2", line: "network.{{ network_name }}.  IN  A 192.168.151.1 ;A2"}

  - name: reload bind9
    systemd: name=bind9 state=reloaded
    become: yes
    when: bind_installed is defined







######################################
############# MYSQL CONF #############
######################################

  - name: update mysql password/privileges
    mysql_user:
      name: "colte_db"
      password: "{{ mysql_password }}"
      host: localhost
      priv: 'colte_db.*:ALL'
    become: yes






######################################
############# EPC CONF ###############
######################################

  - name: symlink oai epc config files
    file:
      src: /usr/local/etc/oai
      dest: /usr/local/etc/colte/oai
      state: link
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_id }}"
      mode: 0755
    when: epc_installed is defined
    become: yes

  - name: write information to hss.conf
    lineinfile:
      dest: "/usr/local/etc/oai/hss.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
      # owner: "{{ ansible_user_id }}"
      # group: "{{ ansible_user_id }}"
      # mode: 0644
    when: epc_installed is defined
    with_items:
    - {field: 'MYSQL_user', line: 'MYSQL_user   = "colte_db";'}
    - {field: 'MYSQL_pass', line: 'MYSQL_pass   = "{{ mysql_password }}";'}
    become: yes

  - name: write information to mme.conf
    lineinfile:
      dest: "/usr/local/etc/oai/mme.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: epc_installed is defined
    with_items:
    - {field: "MME_INTERFACE_NAME_FOR_S1_MME", line: "        MME_INTERFACE_NAME_FOR_S1_MME         = \"{{ enb_iface }}\";"}
    # SMS: Note that right now we just set it to 0.0.0.0 so that it serves on any address.
    # - {field: "MME_IPV4_ADDRESS_FOR_S1_MME", line: "        MME_IPV4_ADDRESS_FOR_S1_MME         = \"{{ enb_iface_addr }}\";"}
    become: yes

  - name: write information to spgw.conf
    lineinfile:
      dest: "/usr/local/etc/oai/spgw.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: epc_installed is defined
    with_items:
    - {field: "SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP", line: "        SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP         = \"{{ enb_iface }}\";"}
    - {field: "SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP", line: "        SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP         = \"{{ enb_iface_addr }}\";"}
    - {field: "PGW_INTERFACE_NAME_FOR_SGI", line: "        PGW_INTERFACE_NAME_FOR_SGI            = \"{{ wan_iface }}\";"}
    - {field: "IPV4_LIST", line: "        IPV4_LIST = (\"{{ lte_subnet }}\");"}
    - {field: 'MYSQL_user', line: '    MYSQL_user   = "colte_db";'}
    - {field: 'MYSQL_pass', line: '    MYSQL_pass   = "{{ mysql_password }}";'}
# SMS TODO: THESE VALUES ARE HARD-CODED WE NEED TO SET THEM TO COLTE'S VALUE IF-AND-ONLY-IF BIND OPTION TURNED ON
    - {field: 'DEFAULT_DNS_IPV4_ADDRESS', line: '    DEFAULT_DNS_IPV4_ADDRESS = "192.168.151.1";'}
    - {field: 'DEFAULT_DNS_SEC_IPV4_ADDRESS', line: '    DEFAULT_DNS_SEC_IPV4_ADDRESS = "192.168.151.1";'}
    become: yes

  - name: update spgw_nat script with wan_iface
    lineinfile:
      dest: "/usr/bin/spgw_nat.sh"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: epc_installed is defined
    with_items:
    - {field: "-C POSTROUTING -o enp3s0", line: "     iptables -t nat -C POSTROUTING -o {{ wan_iface }} -j MASQUERADE"}
    - {field: "-A POSTROUTING -o enp3s0", line: "     iptables -t nat -A POSTROUTING -o {{ wan_iface }} -j MASQUERADE"}
    - {field: "-C FORWARD -i gtp0 -o enp3s0", line: "     iptables -C FORWARD -i gtp0 -o {{ wan_iface }} -j ACCEPT"}
    - {field: "-A FORWARD -i gtp0 -o enp3s0", line: "     iptables -A FORWARD -i gtp0 -o {{ wan_iface }} -j ACCEPT"}
    - {field: "-C FORWARD -i enp3s0 ", line: "     iptables -C FORWARD -i {{ wan_iface }} -o gtp0 -m state --state RELATED,ESTABLISHED -j ACCEPT"}
    - {field: "-A FORWARD -i enp3s0 ", line: "     iptables -A FORWARD -i {{ wan_iface }} -o gtp0 -m state --state RELATED,ESTABLISHED -j ACCEPT"}
    become: yes

  - name: dynamically write tcpdump.service file
    lineinfile:
      dest: "/etc/systemd/system/tcpdump.service"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: epc_installed is defined
    with_items:
    - {field: 'ExecStart', line: "ExecStart=/usr/sbin/tcpdump -i {{ enb_iface_addr }} -w '/var/log/colte/tcpdump/sctp_${TCPDUMP_FORMAT}.pcap' sctp"}






######################################
############# WEBGUI CONF ############
######################################

  - name: write information to webgui.conf
    lineinfile:
      dest: "/etc/nginx/sites-available/webgui.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: webgui_installed is defined
    with_items:
    - {field: "server_name", line: "  server_name network.{{ network_name }};"}

  - name: write environment information to production.env
    lineinfile:
      dest: "/usr/local/etc/colte/webgui.env"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: webgui_installed is defined
    with_items:
    - {field: 'DB_USER', line: 'DB_USER=colte_db'}
    - {field: 'DB_PASSWORD', line: 'DB_PASSWORD={{ mysql_password }}'}






######################################
############# CHAT CONF ##############
######################################

  - name: write information to rocketchat.conf
    lineinfile:
      dest: "/etc/nginx/sites-available/rocketchat.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: chat_installed is defined
    with_items:
    - {field: "server_name", line: "  server_name chat.{{ network_name }};"}

  - name: add localhost dns pointers in /etc/hosts 
    lineinfile:
      dest: "/etc/hosts"
      regexp: "chat"
      line: "127.0.0.1 chat.{{ network_name }}"
    when: chat_installed is defined
    become: yes







######################################
############# OSM CONF ###############
######################################

  - name: dynamically point to the omt server in leaflet.osm.js
    lineinfile:
      dest: "{{ osm_dir }}/vendor/assets/leaflet/leaflet.osm.js"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: osm_installed is defined
    become: yes
    with_items:
    - {field: "url: 'http://omt", line: "    url: 'http://omt.{{ network_name }}/styles/osm-bright/{z}/{x}/{y}.png',"}

  - name: add localhost dns pointers in /etc/hosts 
    lineinfile:
      dest: "/etc/hosts"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: osm_installed is defined
    with_items:
    - {field: "omt", line: "127.0.0.1 omt.{{ network_name }}"}
    - {field: "maps", line: "127.0.0.1 maps.{{ network_name }}"}

## SMS TODO: BIND?!?

  - name: write information to osm.conf
    lineinfile:
      dest: "/etc/nginx/sites-available/osm.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: osm_installed is defined
    with_items:
    - {field: "server_name", line: "  server_name maps.{{ network_name }};"}

  - name: restart nginx
    service: name=nginx state=reloaded
    become: yes
    when: osm_installed is defined





######################################
############# MEDIA CONF #############
######################################

  - name: write information to ums.conf (used for nginx)
    lineinfile:
      dest: "/etc/nginx/sites-available/ums.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: media_installed is defined
    with_items:
    - {field: "server_name", line: "  server_name media.{{ network_name }};"}







######################################
############# XOWA CONF ##############
######################################

  - name: write information to xowa.conf
    lineinfile:
      dest: "/etc/nginx/sites-available/xowa.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: wiki_installed is defined
    with_items:
    - {field: "server_name wiki", line: "  server_name wiki.{{ network_name }};"}
    - {field: "server_name xowa", line: "  server_name xowa.{{ network_name }};"}
